// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractSynced extends ethereum.Event {
  get params(): ContractSynced__Params {
    return new ContractSynced__Params(this);
  }
}

export class ContractSynced__Params {
  _event: ContractSynced;

  constructor(event: ContractSynced) {
    this._event = event;
  }

  get nameHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CounterpartGNSAddressUpdated extends ethereum.Event {
  get params(): CounterpartGNSAddressUpdated__Params {
    return new CounterpartGNSAddressUpdated__Params(this);
  }
}

export class CounterpartGNSAddressUpdated__Params {
  _event: CounterpartGNSAddressUpdated;

  constructor(event: CounterpartGNSAddressUpdated) {
    this._event = event;
  }

  get _counterpart(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CuratorBalanceReceived extends ethereum.Event {
  get params(): CuratorBalanceReceived__Params {
    return new CuratorBalanceReceived__Params(this);
  }
}

export class CuratorBalanceReceived__Params {
  _event: CuratorBalanceReceived;

  constructor(event: CuratorBalanceReceived) {
    this._event = event;
  }

  get _l1SubgraphId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _l2SubgraphID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _l2Curator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CuratorBalanceReturnedToBeneficiary extends ethereum.Event {
  get params(): CuratorBalanceReturnedToBeneficiary__Params {
    return new CuratorBalanceReturnedToBeneficiary__Params(this);
  }
}

export class CuratorBalanceReturnedToBeneficiary__Params {
  _event: CuratorBalanceReturnedToBeneficiary;

  constructor(event: CuratorBalanceReturnedToBeneficiary) {
    this._event = event;
  }

  get _l1SubgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _l2Curator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GRTWithdrawn extends ethereum.Event {
  get params(): GRTWithdrawn__Params {
    return new GRTWithdrawn__Params(this);
  }
}

export class GRTWithdrawn__Params {
  _event: GRTWithdrawn;

  constructor(event: GRTWithdrawn) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get curator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nSignalBurnt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get withdrawnGRT(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LegacySubgraphClaimed extends ethereum.Event {
  get params(): LegacySubgraphClaimed__Params {
    return new LegacySubgraphClaimed__Params(this);
  }
}

export class LegacySubgraphClaimed__Params {
  _event: LegacySubgraphClaimed;

  constructor(event: LegacySubgraphClaimed) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ParameterUpdated extends ethereum.Event {
  get params(): ParameterUpdated__Params {
    return new ParameterUpdated__Params(this);
  }
}

export class ParameterUpdated__Params {
  _event: ParameterUpdated;

  constructor(event: ParameterUpdated) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetDefaultName extends ethereum.Event {
  get params(): SetDefaultName__Params {
    return new SetDefaultName__Params(this);
  }
}

export class SetDefaultName__Params {
  _event: SetDefaultName;

  constructor(event: SetDefaultName) {
    this._event = event;
  }

  get graphAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nameSystem(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nameIdentifier(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class SignalBurned extends ethereum.Event {
  get params(): SignalBurned__Params {
    return new SignalBurned__Params(this);
  }
}

export class SignalBurned__Params {
  _event: SignalBurned;

  constructor(event: SignalBurned) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get curator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nSignalBurnt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vSignalBurnt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokensReceived(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SignalMinted extends ethereum.Event {
  get params(): SignalMinted__Params {
    return new SignalMinted__Params(this);
  }
}

export class SignalMinted__Params {
  _event: SignalMinted;

  constructor(event: SignalMinted) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get curator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nSignalCreated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get vSignalCreated(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokensDeposited(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SignalTransferred extends ethereum.Event {
  get params(): SignalTransferred__Params {
    return new SignalTransferred__Params(this);
  }
}

export class SignalTransferred__Params {
  _event: SignalTransferred;

  constructor(event: SignalTransferred) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nSignalTransferred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SubgraphDeprecated extends ethereum.Event {
  get params(): SubgraphDeprecated__Params {
    return new SubgraphDeprecated__Params(this);
  }
}

export class SubgraphDeprecated__Params {
  _event: SubgraphDeprecated;

  constructor(event: SubgraphDeprecated) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get withdrawableGRT(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubgraphL2TransferFinalized extends ethereum.Event {
  get params(): SubgraphL2TransferFinalized__Params {
    return new SubgraphL2TransferFinalized__Params(this);
  }
}

export class SubgraphL2TransferFinalized__Params {
  _event: SubgraphL2TransferFinalized;

  constructor(event: SubgraphL2TransferFinalized) {
    this._event = event;
  }

  get _l2SubgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SubgraphMetadataUpdated extends ethereum.Event {
  get params(): SubgraphMetadataUpdated__Params {
    return new SubgraphMetadataUpdated__Params(this);
  }
}

export class SubgraphMetadataUpdated__Params {
  _event: SubgraphMetadataUpdated;

  constructor(event: SubgraphMetadataUpdated) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subgraphMetadata(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SubgraphNFTUpdated extends ethereum.Event {
  get params(): SubgraphNFTUpdated__Params {
    return new SubgraphNFTUpdated__Params(this);
  }
}

export class SubgraphNFTUpdated__Params {
  _event: SubgraphNFTUpdated;

  constructor(event: SubgraphNFTUpdated) {
    this._event = event;
  }

  get subgraphNFT(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubgraphPublished extends ethereum.Event {
  get params(): SubgraphPublished__Params {
    return new SubgraphPublished__Params(this);
  }
}

export class SubgraphPublished__Params {
  _event: SubgraphPublished;

  constructor(event: SubgraphPublished) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get reserveRatio(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubgraphReceivedFromL1 extends ethereum.Event {
  get params(): SubgraphReceivedFromL1__Params {
    return new SubgraphReceivedFromL1__Params(this);
  }
}

export class SubgraphReceivedFromL1__Params {
  _event: SubgraphReceivedFromL1;

  constructor(event: SubgraphReceivedFromL1) {
    this._event = event;
  }

  get _l1SubgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _l2SubgraphID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SubgraphUpgraded extends ethereum.Event {
  get params(): SubgraphUpgraded__Params {
    return new SubgraphUpgraded__Params(this);
  }
}

export class SubgraphUpgraded__Params {
  _event: SubgraphUpgraded;

  constructor(event: SubgraphUpgraded) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vSignalCreated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensSignalled(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class SubgraphVersionUpdated extends ethereum.Event {
  get params(): SubgraphVersionUpdated__Params {
    return new SubgraphVersionUpdated__Params(this);
  }
}

export class SubgraphVersionUpdated__Params {
  _event: SubgraphVersionUpdated;

  constructor(event: SubgraphVersionUpdated) {
    this._event = event;
  }

  get subgraphID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get versionMetadata(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Metadata__getLegacySubgraphKeyResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getSeqID(): BigInt {
    return this.value1;
  }
}

export class Metadata__legacySubgraphDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: boolean,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getVSignal(): BigInt {
    return this.value0;
  }

  getNSignal(): BigInt {
    return this.value1;
  }

  getSubgraphDeploymentID(): Bytes {
    return this.value2;
  }

  getReserveRatioDeprecated(): BigInt {
    return this.value3;
  }

  getDisabled(): boolean {
    return this.value4;
  }

  getWithdrawableGRT(): BigInt {
    return this.value5;
  }
}

export class Metadata__legacySubgraphKeysResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAccount(): Address {
    return this.value0;
  }

  getAccountSeqID(): BigInt {
    return this.value1;
  }
}

export class Metadata__nSignalToTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Metadata__subgraphL2TransferDataResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;

  constructor(value0: BigInt, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTokens(): BigInt {
    return this.value0;
  }

  getL2Done(): boolean {
    return this.value1;
  }

  getSubgraphReceivedOnL2BlockNumber(): BigInt {
    return this.value2;
  }
}

export class Metadata__subgraphsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: boolean,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getVSignal(): BigInt {
    return this.value0;
  }

  getNSignal(): BigInt {
    return this.value1;
  }

  getSubgraphDeploymentID(): Bytes {
    return this.value2;
  }

  getReserveRatioDeprecated(): BigInt {
    return this.value3;
  }

  getDisabled(): boolean {
    return this.value4;
  }

  getWithdrawableGRT(): BigInt {
    return this.value5;
  }
}

export class Metadata__tokensToNSignalResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Metadata extends ethereum.SmartContract {
  static bind(address: Address): Metadata {
    return new Metadata("Metadata", address);
  }

  SUBGRAPH_ID_ALIAS_OFFSET(): BigInt {
    let result = super.call(
      "SUBGRAPH_ID_ALIAS_OFFSET",
      "SUBGRAPH_ID_ALIAS_OFFSET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SUBGRAPH_ID_ALIAS_OFFSET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SUBGRAPH_ID_ALIAS_OFFSET",
      "SUBGRAPH_ID_ALIAS_OFFSET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  __DEPRECATED_bondingCurve(): Address {
    let result = super.call(
      "__DEPRECATED_bondingCurve",
      "__DEPRECATED_bondingCurve():(address)",
      []
    );

    return result[0].toAddress();
  }

  try___DEPRECATED_bondingCurve(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "__DEPRECATED_bondingCurve",
      "__DEPRECATED_bondingCurve():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  counterpartGNSAddress(): Address {
    let result = super.call(
      "counterpartGNSAddress",
      "counterpartGNSAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_counterpartGNSAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "counterpartGNSAddress",
      "counterpartGNSAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAliasedL2SubgraphID(_l1SubgraphID: BigInt): BigInt {
    let result = super.call(
      "getAliasedL2SubgraphID",
      "getAliasedL2SubgraphID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_l1SubgraphID)]
    );

    return result[0].toBigInt();
  }

  try_getAliasedL2SubgraphID(
    _l1SubgraphID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAliasedL2SubgraphID",
      "getAliasedL2SubgraphID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_l1SubgraphID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCuratorSignal(_subgraphID: BigInt, _curator: Address): BigInt {
    let result = super.call(
      "getCuratorSignal",
      "getCuratorSignal(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromAddress(_curator)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCuratorSignal(
    _subgraphID: BigInt,
    _curator: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCuratorSignal",
      "getCuratorSignal(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromAddress(_curator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLegacySubgraphKey(
    _subgraphID: BigInt
  ): Metadata__getLegacySubgraphKeyResult {
    let result = super.call(
      "getLegacySubgraphKey",
      "getLegacySubgraphKey(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );

    return new Metadata__getLegacySubgraphKeyResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getLegacySubgraphKey(
    _subgraphID: BigInt
  ): ethereum.CallResult<Metadata__getLegacySubgraphKeyResult> {
    let result = super.tryCall(
      "getLegacySubgraphKey",
      "getLegacySubgraphKey(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__getLegacySubgraphKeyResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  isLegacySubgraph(_subgraphID: BigInt): boolean {
    let result = super.call(
      "isLegacySubgraph",
      "isLegacySubgraph(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );

    return result[0].toBoolean();
  }

  try_isLegacySubgraph(_subgraphID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLegacySubgraph",
      "isLegacySubgraph(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublished(_subgraphID: BigInt): boolean {
    let result = super.call("isPublished", "isPublished(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_subgraphID)
    ]);

    return result[0].toBoolean();
  }

  try_isPublished(_subgraphID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublished", "isPublished(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_subgraphID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  legacySubgraphData(
    param0: Address,
    param1: BigInt
  ): Metadata__legacySubgraphDataResult {
    let result = super.call(
      "legacySubgraphData",
      "legacySubgraphData(address,uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Metadata__legacySubgraphDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt()
    );
  }

  try_legacySubgraphData(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Metadata__legacySubgraphDataResult> {
    let result = super.tryCall(
      "legacySubgraphData",
      "legacySubgraphData(address,uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__legacySubgraphDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt()
      )
    );
  }

  legacySubgraphKeys(param0: BigInt): Metadata__legacySubgraphKeysResult {
    let result = super.call(
      "legacySubgraphKeys",
      "legacySubgraphKeys(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Metadata__legacySubgraphKeysResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_legacySubgraphKeys(
    param0: BigInt
  ): ethereum.CallResult<Metadata__legacySubgraphKeysResult> {
    let result = super.tryCall(
      "legacySubgraphKeys",
      "legacySubgraphKeys(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__legacySubgraphKeysResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nSignalToTokens(
    _subgraphID: BigInt,
    _nSignalIn: BigInt
  ): Metadata__nSignalToTokensResult {
    let result = super.call(
      "nSignalToTokens",
      "nSignalToTokens(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );

    return new Metadata__nSignalToTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_nSignalToTokens(
    _subgraphID: BigInt,
    _nSignalIn: BigInt
  ): ethereum.CallResult<Metadata__nSignalToTokensResult> {
    let result = super.tryCall(
      "nSignalToTokens",
      "nSignalToTokens(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__nSignalToTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  nSignalToVSignal(_subgraphID: BigInt, _nSignalIn: BigInt): BigInt {
    let result = super.call(
      "nSignalToVSignal",
      "nSignalToVSignal(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_nSignalToVSignal(
    _subgraphID: BigInt,
    _nSignalIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nSignalToVSignal",
      "nSignalToVSignal(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_nSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextAccountSeqID(param0: Address): BigInt {
    let result = super.call(
      "nextAccountSeqID",
      "nextAccountSeqID(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_nextAccountSeqID(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAccountSeqID",
      "nextAccountSeqID(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(_tokenID: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenID)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerTaxPercentage(): BigInt {
    let result = super.call(
      "ownerTaxPercentage",
      "ownerTaxPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_ownerTaxPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownerTaxPercentage",
      "ownerTaxPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgraphL2TransferData(
    param0: BigInt
  ): Metadata__subgraphL2TransferDataResult {
    let result = super.call(
      "subgraphL2TransferData",
      "subgraphL2TransferData(uint256):(uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Metadata__subgraphL2TransferDataResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt()
    );
  }

  try_subgraphL2TransferData(
    param0: BigInt
  ): ethereum.CallResult<Metadata__subgraphL2TransferDataResult> {
    let result = super.tryCall(
      "subgraphL2TransferData",
      "subgraphL2TransferData(uint256):(uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__subgraphL2TransferDataResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt()
      )
    );
  }

  subgraphNFT(): Address {
    let result = super.call("subgraphNFT", "subgraphNFT():(address)", []);

    return result[0].toAddress();
  }

  try_subgraphNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("subgraphNFT", "subgraphNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subgraphSignal(_subgraphID: BigInt): BigInt {
    let result = super.call(
      "subgraphSignal",
      "subgraphSignal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );

    return result[0].toBigInt();
  }

  try_subgraphSignal(_subgraphID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subgraphSignal",
      "subgraphSignal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgraphTokens(_subgraphID: BigInt): BigInt {
    let result = super.call(
      "subgraphTokens",
      "subgraphTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );

    return result[0].toBigInt();
  }

  try_subgraphTokens(_subgraphID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subgraphTokens",
      "subgraphTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_subgraphID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgraphs(param0: BigInt): Metadata__subgraphsResult {
    let result = super.call(
      "subgraphs",
      "subgraphs(uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Metadata__subgraphsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt()
    );
  }

  try_subgraphs(
    param0: BigInt
  ): ethereum.CallResult<Metadata__subgraphsResult> {
    let result = super.tryCall(
      "subgraphs",
      "subgraphs(uint256):(uint256,uint256,bytes32,uint32,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__subgraphsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt()
      )
    );
  }

  tokensToNSignal(
    _subgraphID: BigInt,
    _tokensIn: BigInt
  ): Metadata__tokensToNSignalResult {
    let result = super.call(
      "tokensToNSignal",
      "tokensToNSignal(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );

    return new Metadata__tokensToNSignalResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_tokensToNSignal(
    _subgraphID: BigInt,
    _tokensIn: BigInt
  ): ethereum.CallResult<Metadata__tokensToNSignalResult> {
    let result = super.tryCall(
      "tokensToNSignal",
      "tokensToNSignal(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Metadata__tokensToNSignalResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  vSignalToNSignal(_subgraphID: BigInt, _vSignalIn: BigInt): BigInt {
    let result = super.call(
      "vSignalToNSignal",
      "vSignalToNSignal(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_vSignalIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_vSignalToNSignal(
    _subgraphID: BigInt,
    _vSignalIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vSignalToNSignal",
      "vSignalToNSignal(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_subgraphID),
        ethereum.Value.fromUnsignedBigInt(_vSignalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptProxyCall extends ethereum.Call {
  get inputs(): AcceptProxyCall__Inputs {
    return new AcceptProxyCall__Inputs(this);
  }

  get outputs(): AcceptProxyCall__Outputs {
    return new AcceptProxyCall__Outputs(this);
  }
}

export class AcceptProxyCall__Inputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProxyCall__Outputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }
}

export class AcceptProxyAndCallCall extends ethereum.Call {
  get inputs(): AcceptProxyAndCallCall__Inputs {
    return new AcceptProxyAndCallCall__Inputs(this);
  }

  get outputs(): AcceptProxyAndCallCall__Outputs {
    return new AcceptProxyAndCallCall__Outputs(this);
  }
}

export class AcceptProxyAndCallCall__Inputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptProxyAndCallCall__Outputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }
}

export class ApproveAllCall extends ethereum.Call {
  get inputs(): ApproveAllCall__Inputs {
    return new ApproveAllCall__Inputs(this);
  }

  get outputs(): ApproveAllCall__Outputs {
    return new ApproveAllCall__Outputs(this);
  }
}

export class ApproveAllCall__Inputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class ApproveAllCall__Outputs {
  _call: ApproveAllCall;

  constructor(call: ApproveAllCall) {
    this._call = call;
  }
}

export class BurnSignalCall extends ethereum.Call {
  get inputs(): BurnSignalCall__Inputs {
    return new BurnSignalCall__Inputs(this);
  }

  get outputs(): BurnSignalCall__Outputs {
    return new BurnSignalCall__Outputs(this);
  }
}

export class BurnSignalCall__Inputs {
  _call: BurnSignalCall;

  constructor(call: BurnSignalCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nSignal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokensOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnSignalCall__Outputs {
  _call: BurnSignalCall;

  constructor(call: BurnSignalCall) {
    this._call = call;
  }
}

export class DeprecateSubgraphCall extends ethereum.Call {
  get inputs(): DeprecateSubgraphCall__Inputs {
    return new DeprecateSubgraphCall__Inputs(this);
  }

  get outputs(): DeprecateSubgraphCall__Outputs {
    return new DeprecateSubgraphCall__Outputs(this);
  }
}

export class DeprecateSubgraphCall__Inputs {
  _call: DeprecateSubgraphCall;

  constructor(call: DeprecateSubgraphCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeprecateSubgraphCall__Outputs {
  _call: DeprecateSubgraphCall;

  constructor(call: DeprecateSubgraphCall) {
    this._call = call;
  }
}

export class FinishSubgraphTransferFromL1Call extends ethereum.Call {
  get inputs(): FinishSubgraphTransferFromL1Call__Inputs {
    return new FinishSubgraphTransferFromL1Call__Inputs(this);
  }

  get outputs(): FinishSubgraphTransferFromL1Call__Outputs {
    return new FinishSubgraphTransferFromL1Call__Outputs(this);
  }
}

export class FinishSubgraphTransferFromL1Call__Inputs {
  _call: FinishSubgraphTransferFromL1Call;

  constructor(call: FinishSubgraphTransferFromL1Call) {
    this._call = call;
  }

  get _l2SubgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _versionMetadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FinishSubgraphTransferFromL1Call__Outputs {
  _call: FinishSubgraphTransferFromL1Call;

  constructor(call: FinishSubgraphTransferFromL1Call) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MigrateLegacySubgraphCall extends ethereum.Call {
  get inputs(): MigrateLegacySubgraphCall__Inputs {
    return new MigrateLegacySubgraphCall__Inputs(this);
  }

  get outputs(): MigrateLegacySubgraphCall__Outputs {
    return new MigrateLegacySubgraphCall__Outputs(this);
  }
}

export class MigrateLegacySubgraphCall__Inputs {
  _call: MigrateLegacySubgraphCall;

  constructor(call: MigrateLegacySubgraphCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subgraphNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MigrateLegacySubgraphCall__Outputs {
  _call: MigrateLegacySubgraphCall;

  constructor(call: MigrateLegacySubgraphCall) {
    this._call = call;
  }
}

export class MintSignalCall extends ethereum.Call {
  get inputs(): MintSignalCall__Inputs {
    return new MintSignalCall__Inputs(this);
  }

  get outputs(): MintSignalCall__Outputs {
    return new MintSignalCall__Outputs(this);
  }
}

export class MintSignalCall__Inputs {
  _call: MintSignalCall;

  constructor(call: MintSignalCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokensIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nSignalOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintSignalCall__Outputs {
  _call: MintSignalCall;

  constructor(call: MintSignalCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }
}

export class PublishNewSubgraphCall extends ethereum.Call {
  get inputs(): PublishNewSubgraphCall__Inputs {
    return new PublishNewSubgraphCall__Inputs(this);
  }

  get outputs(): PublishNewSubgraphCall__Outputs {
    return new PublishNewSubgraphCall__Outputs(this);
  }
}

export class PublishNewSubgraphCall__Inputs {
  _call: PublishNewSubgraphCall;

  constructor(call: PublishNewSubgraphCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _versionMetadata(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PublishNewSubgraphCall__Outputs {
  _call: PublishNewSubgraphCall;

  constructor(call: PublishNewSubgraphCall) {
    this._call = call;
  }
}

export class PublishNewVersionCall extends ethereum.Call {
  get inputs(): PublishNewVersionCall__Inputs {
    return new PublishNewVersionCall__Inputs(this);
  }

  get outputs(): PublishNewVersionCall__Outputs {
    return new PublishNewVersionCall__Outputs(this);
  }
}

export class PublishNewVersionCall__Inputs {
  _call: PublishNewVersionCall;

  constructor(call: PublishNewVersionCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _versionMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class PublishNewVersionCall__Outputs {
  _call: PublishNewVersionCall;

  constructor(call: PublishNewVersionCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetCounterpartGNSAddressCall extends ethereum.Call {
  get inputs(): SetCounterpartGNSAddressCall__Inputs {
    return new SetCounterpartGNSAddressCall__Inputs(this);
  }

  get outputs(): SetCounterpartGNSAddressCall__Outputs {
    return new SetCounterpartGNSAddressCall__Outputs(this);
  }
}

export class SetCounterpartGNSAddressCall__Inputs {
  _call: SetCounterpartGNSAddressCall;

  constructor(call: SetCounterpartGNSAddressCall) {
    this._call = call;
  }

  get _counterpart(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCounterpartGNSAddressCall__Outputs {
  _call: SetCounterpartGNSAddressCall;

  constructor(call: SetCounterpartGNSAddressCall) {
    this._call = call;
  }
}

export class SetDefaultNameCall extends ethereum.Call {
  get inputs(): SetDefaultNameCall__Inputs {
    return new SetDefaultNameCall__Inputs(this);
  }

  get outputs(): SetDefaultNameCall__Outputs {
    return new SetDefaultNameCall__Outputs(this);
  }
}

export class SetDefaultNameCall__Inputs {
  _call: SetDefaultNameCall;

  constructor(call: SetDefaultNameCall) {
    this._call = call;
  }

  get _graphAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nameSystem(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _nameIdentifier(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _name(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SetDefaultNameCall__Outputs {
  _call: SetDefaultNameCall;

  constructor(call: SetDefaultNameCall) {
    this._call = call;
  }
}

export class SetOwnerTaxPercentageCall extends ethereum.Call {
  get inputs(): SetOwnerTaxPercentageCall__Inputs {
    return new SetOwnerTaxPercentageCall__Inputs(this);
  }

  get outputs(): SetOwnerTaxPercentageCall__Outputs {
    return new SetOwnerTaxPercentageCall__Outputs(this);
  }
}

export class SetOwnerTaxPercentageCall__Inputs {
  _call: SetOwnerTaxPercentageCall;

  constructor(call: SetOwnerTaxPercentageCall) {
    this._call = call;
  }

  get _ownerTaxPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOwnerTaxPercentageCall__Outputs {
  _call: SetOwnerTaxPercentageCall;

  constructor(call: SetOwnerTaxPercentageCall) {
    this._call = call;
  }
}

export class SetSubgraphNFTCall extends ethereum.Call {
  get inputs(): SetSubgraphNFTCall__Inputs {
    return new SetSubgraphNFTCall__Inputs(this);
  }

  get outputs(): SetSubgraphNFTCall__Outputs {
    return new SetSubgraphNFTCall__Outputs(this);
  }
}

export class SetSubgraphNFTCall__Inputs {
  _call: SetSubgraphNFTCall;

  constructor(call: SetSubgraphNFTCall) {
    this._call = call;
  }

  get _subgraphNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSubgraphNFTCall__Outputs {
  _call: SetSubgraphNFTCall;

  constructor(call: SetSubgraphNFTCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall extends ethereum.Call {
  get inputs(): SyncAllContractsCall__Inputs {
    return new SyncAllContractsCall__Inputs(this);
  }

  get outputs(): SyncAllContractsCall__Outputs {
    return new SyncAllContractsCall__Outputs(this);
  }
}

export class SyncAllContractsCall__Inputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class SyncAllContractsCall__Outputs {
  _call: SyncAllContractsCall;

  constructor(call: SyncAllContractsCall) {
    this._call = call;
  }
}

export class TransferSignalCall extends ethereum.Call {
  get inputs(): TransferSignalCall__Inputs {
    return new TransferSignalCall__Inputs(this);
  }

  get outputs(): TransferSignalCall__Outputs {
    return new TransferSignalCall__Outputs(this);
  }
}

export class TransferSignalCall__Inputs {
  _call: TransferSignalCall;

  constructor(call: TransferSignalCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferSignalCall__Outputs {
  _call: TransferSignalCall;

  constructor(call: TransferSignalCall) {
    this._call = call;
  }
}

export class UpdateSubgraphMetadataCall extends ethereum.Call {
  get inputs(): UpdateSubgraphMetadataCall__Inputs {
    return new UpdateSubgraphMetadataCall__Inputs(this);
  }

  get outputs(): UpdateSubgraphMetadataCall__Outputs {
    return new UpdateSubgraphMetadataCall__Outputs(this);
  }
}

export class UpdateSubgraphMetadataCall__Inputs {
  _call: UpdateSubgraphMetadataCall;

  constructor(call: UpdateSubgraphMetadataCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _subgraphMetadata(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateSubgraphMetadataCall__Outputs {
  _call: UpdateSubgraphMetadataCall;

  constructor(call: UpdateSubgraphMetadataCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _subgraphID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
