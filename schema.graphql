type Account @entity {
  # Unique identifier for the account, typically the wallet address.
  id: ID!
  # Time the account was created
  createdAt: Int!
  # Total query fees paid by the account, denominated in the smallest unit of currency.
  queryFeesPaid: BigInt!
  # Current billing balance of the account, can represent a credit or debit balance.
  billingBalance: BigInt!
  # List of subgraphs associated with this account, derived from the Subgraph entity.
  subgraphs: [Subgraph!]! @derivedFrom(field: "owner")
}

type Subgraph @entity {
  # Unique identifier for each subgraph entity.
  id: ID!
  # Reference to the account entity associated with this subgraph.
  owner: Account!
  # The name of the subgraph.
  name: String!
  # The hash of the previous version of the subgraph on L1
  previousVersionHash: BigInt!
  # Hash of the current active version of the subgraph.
  currentVersionHash: Bytes!
  #Pervious balance on L1
  previousBalance: BigInt!
  # Total query fees generated by the subgraph.
  queryFees: BigInt!
}

type SubgraphMetadata @entity {
  # Metadata from IPFS linked in GNS
  id: ID!
  "Subgraph metadata"
  metadataHash: Bytes!
  "Subgraph metadata ipfs hash"
  ipfsMetadataHash: Bytes!
  "Short description of the subgraph"
  description: String
  "Image in string format"
  image: String
  "NFT Image representation"
  nftImage: String
  "Location of the code for this project"
  codeRepository: String
  "Projects website"
  website: String
  "Display name"
  displayName: String
}

type SubgraphDeployment @entity {
  "Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes"
  id: ID!
  "IPFS hash of the subgraph manifest"
  ipfsHash: String!
  "Creation timestamp"
  createdAt: Int!
}

type Transaction @entity {
  # Unique identifier for the transaction, usually the transaction hash.
  id: ID!
  # The account involved in the transaction.
  account: Account!
  # The amount of tokens/currency transferred in the transaction.
  amount: BigInt!
  # The timestamp of when the transaction occurred.
  timestamp: BigInt
}
